// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())

  leagues LeagueMember[]
  teams   Team[]

  ownedLeagues League[] @relation("LeagueOwners")
}

model League {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  ownerId   String

  owner User @relation("LeagueOwners", fields: [ownerId], references: [id])

  members LeagueMember[]
  teams   Team[]

  draftStarted Boolean  @default(false)
  currentPick  Int?
  draftOrder   String[]

}

model LeagueMember {
  id       String   @id @default(uuid())
  userId   String
  leagueId String
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
  league   League   @relation(fields: [leagueId], references: [id])
}

model Player {
  id          String    @id @default(uuid())
  atpId       Int       @unique
  name        String
  nationality String?
  birthDate   DateTime?

  teams TeamPlayer[]

  wonMatches  MatchResult[] @relation("WinnerRelation")
  lostMatches MatchResult[] @relation("LoserRelation")
}

model Team {
  id        String       @id @default(uuid())
  name      String
  ownerId   String
  leagueId  String
  createdAt DateTime     @default(now())
  owner     User         @relation(fields: [ownerId], references: [id])
  league    League       @relation(fields: [leagueId], references: [id])
  players   TeamPlayer[]
}

model TeamPlayer {
  id        String   @id @default(uuid())
  teamId    String
  playerId  String
  draftedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model Tournament {
  id        String        @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  matches   MatchResult[]
  createdAt DateTime      @default(now())
}

model MatchResult {
  id           String   @id @default(uuid())
  tournamentId String
  round        String
  winnerId     String
  loserId      String
  playedAt     DateTime
  createdAt    DateTime @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id])

  winner Player @relation("WinnerRelation", fields: [winnerId], references: [id])
  loser  Player @relation("LoserRelation", fields: [loserId], references: [id])
}
